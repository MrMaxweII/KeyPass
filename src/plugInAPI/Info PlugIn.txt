
Beschreibung der PlugIN API für den KeyPass


Aufbau PlugIn:
Jedes PlugIn ist in eine signierte JSON-Datei gepackt und besteht aus keinen weiteren Dateien. Die Dateiendung des PlugIn ist aber "xxx.plugin".
Es können Gundsätzlich nur Java-Klassen als PlugIn gepackt werden. (Keine .jar-Archive, dll´s oder andere Dateien).
Daher müssen vorher benötigte Abhängikteiten also Jar-Archive für jedes PlugIn in den KeyPass importiert werden.
Für diese Bibliotheken ist im "lib"-Ordner der "libPlugins" Ordner vorgesehen! 
Leider ist das dynamische laden von komplexen .jar-Archiven (mit dll´s und diversen Dateien) aufwändig, langsam, unzuverlässig und sehr problematisch. 
Das jar. Archive gemeinsam mit dem Plug in eine JSON-Datei zu packen ist mir so nicht gelungen, 
Ein Grund dafür ist, das diverser Code aus der Bibliothek eingenständig Dateien innerhalb der eigenen Bibliothek nachladen will, und diese Dateien dann nicht finden kann. (Weil sie ja in der JSON-Datei gepackt sind)


PlugIn erstellen / Main-Klasse:
Richtlinien für die PlugIn-Main-Klasse sind im Interface: Plugins.jave beschrieben.
Jedes PlugIn muss eine Main-Klasse mit einer Start-Methode implementieren.														


PlugIn Signierung:
Plugins für den KeyPass werden innerhalb der JSON Datei mit ECDSA signiert. Dies soll verhindern das Schadcode durch ein PlugIn eingeschleust werden kann.		
Nur richtig signierte Plugins, werden später vom KeyPass auch ausgeführt.												
Der Public-Key befindet sich im Code des KeyGen, (GUI: pubKeySig) und wird mit dem Pub-Key in der Signierung verglichen.
Der Public-Key ist: "03291251a267e24ed362241cdaba7c953a52b295c81f92e7fd10df665a6b000441"	
Der Private-Key wird natürlich nicht gespeichert, und muss von Signierer selbst beim Signieren eingetragen werden.	
Das Signierte Plugin wird anschließend in eine JSON-Datei gepackt die dann das fertige Plugin darstellt,l die Dateiendung des PlugIn ist aber "xxx.plugin".			
Ausführbare Plugins für den KeyPass sind daher JSON-Dateien mit gänderter Dateiendung zu .plugin. Ein Beispiel PlugIn Datei könnte so aussehen: "Test1.plugin".									
Sollte der KeyGen veröffentlicht werden, so müsste der jeweilige Besitzer, wenn er denn eigene PlugIns erstellen und signieren will, einen eigenen PublicKey (passend zu seinem Private-Key)					
im Code des KeyPass hinterlegen und neu kompilieren. (GUI: pubKeySig)  Anderenfalls müsste der Besitzer des Private-Keys (Entwickler, author des KeyPass) jedes fremde PlugIn signieren.


PlugIn packen und Signieren:
Zum Signieren und packen gibt es ein eigenständiges Java-Programm "PluginSignierer". 
Dieses Programm ladt alle Java-Klassen des PlugIns, signiert sie und packt sie anschließend in eine JSON-Datei.
Das Programm hat eine GUI in die alle benötigten Daten eingetragen werden. Alle zum PlugIn gehörenden Klasse müssen sich dann im Hauptverzeichnis des PluginSignierers befinden.	
Es können nur Java-Klassen (xxx.class) verwendet werden! (Innere Klassen nicht vergessen)
Die Anzahl der Java-Klassen ist unbegrenzt, es müssen aber alle Java-Klassen direkt im Hauptverzeichnis liegen, es dürfen Keine Ordner verwendet werden.
Die Reihenfolge der Klassen muss auch richtig sein. z.B. müssen erste alle Interface-Klassen geladen werden.
Die Reihenfolge des Ladens wird in Alphabetischer Reihenfolge des Klassennamens bestimmt. Um Klassen nach vorne zu bringen einfach den Dateinamen der Klasse ändern. 
Der Innere Klassenname der Java-Klasse muss nicht geändert werden und muss auch nicht mit dem Dateinahmen der Klasse übereinstimmen. 	
Wenn alle Eingaben richtig/plausibel sind, wird nach dem start, eine xxx.json Datei im selben Verzeichnis erstellt die das signierte PlugIn darstellt.		 


PlugIn´s in den KeyPass laden:
Die fertigen PlugIns im JSON-Format (Dateiendung: .plugin) müssen nur in den Ordner "plugins" des KeyPass gelegt werden.
Sie werden dann vom KeyPass selbstständig erkannt und geladen. 
In diesen Ordner "plugins" dürfen (außer PlugIns.plugin) keine weiteren Datein gelegt werden! 
Fehlerhafte oder falsch signierte PlugIns dürfen sich ebenfalls nicht im plugins-Ordner befinden!
Der KeyPass würde nicht richtig starten, sondern nur eine entsprechende Fehlermeldung ausgeben. 


Die PlugIn.json Datei Beispiel:
-------------------------------------------------------------------------------------------------------------------------------------------------------------	
	test.plugin Datei Beispiel:
	
	{
 	"date": "16.01.2023",
 	"classData": [
 	"cafebabe00000037006807000201000f74776f46412f5032666131243124310700040100106a6176612f6c616e672f4f626a6563740700060100126a6176612f",
 	"cafebabe00000037006807000201000f74776f46412f5032666131243124310700040100106a6176612f6c616e672f4f626a6563740700060100126a6176612f",
 	"cafebabe00000037006807000201000f74776f46412f5032666131243124310700040100106a6176612f6c616e672f4f626a6563740700060100126a6176612f",
 	],
 	"coreApp": "KeyPass",
 	"autor": "Mr. Maxwell",
 	"dateiID": "coo1c0d0d1961ae35414616de8634204f4cf8fcd990abdb7007d66e1bd602c22",
 	"pluginVersion": "0.0",
 	"r": "dc0bfb89ae8d70b52d06e51cb25713797246fd92562ce99c48d7a2ddf26f2559",
 	"s": "80c1e2a5527c31b3dbc95ac234b87ca0f3b646bded9b85995daad2865251f3bb",
 	"pluginName": "TestPlugIn1",
 	"mainClassName": "P2fa1",
 	"packageName": "twoFA",
 	"coreVersion": "1.2.0",
 	"pubKey": "03291251a267e24ed362241cdaba7c953a52b295c81f92e7fd10df665a6b000441"
	}
	
	- "date"			= Datum der Signierung des PlugIns, wird selbstständig eingetragen.
	- "classData" 		= Ein JSON-Array mit allen Java-Klassen des PlugIns als Hex-String
	- "coreApp"			= Name der Anwendung für dieses PlugIn, ist immer "KeyPass"
	- "autor"			= Name/Firma/Alis des Autors des PlugIns, ist frei wählbar und darf leer sein.
	- "dateiID"			= Ist für alle KeyPass-PlugIns immer gleich: "coo1c0d0d1961ae35414616de8634204f4cf8fcd990abdb7007d66e1bd602c22" 
	- "pluginVersion"	= Die Version des erstellen PlugIn´s. Ist frei wählbar.	
	- "r" 				= Signatur r-Teil
	- "s" 				= Signatur s-Teil
	- "pluginName"		" Der Name des PlugIns, ist frei wählbar und entspricht dem späteren Dateinamen der plugInName.json Datei. 
	- "mainClassName"	= Der PlugIn-Main-Class Name ist der Name der PlugIn Klasse die die Start-Methode enthält. Der Name wird ohne Dateiendung ".class" eingegeben. Muss korrekt sein, sonnst kann das PlugIn nicht starten.
 	- "packageName"		= Der Package Name ist der Packet-Name in der die Main-Klasse des PlugIn´s ist. Die Erste Zeile in der Java-Klasse ("package xxx;") ist hier gemeint.
	- "coreVersion" 	= Letzte KeyPass-Version unter der das Plugin getestet wurde.
	- "pubKey"			= Public-Key der Signierung (Komprimierte Form)
	Der Signatur-Hash ist SHA256 von "classData". Von jeder Klasse wird zuerst ein SHA256 Hash gebildet. Alle Hashes werden dann aneinander gehängt und wieder gehasht.
-------------------------------------------------------------------------------------------------------------------------------------------------------------	
	
	
PlugIn Settings:
Da jedes PlugIn eine JSON-Datei ist, können PlugIn spezifische Einstellungen in die PlugIn Datei einfach hinzugefügt werden.
So kann eine settings.dat etc nicht nur eingespart werden, sondern die benuzerspezifischen Einstellungen bleiben beim übertragen der PlugIn Datei damit gleich erhalten.
Es gibt keine Vorgaben wie dies zu tun ist, nur dürfen die ursprünglichen Daten in der Datei natürlich nicht verändert werden.
Eine Sinnvolle Vorgehensweise währe, ein neues JSON-Object mit dem Namen "settings" hinzuzufügen, in dem dann alle Einstellungen des Plugins enthalten sind.


	
	
	